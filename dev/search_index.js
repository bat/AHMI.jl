var documenterSearchIndex = {"docs":
[{"location":"stable_api/#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"stable_api/","page":"API Documentation","title":"API Documentation","text":"AHMI\nAHMIntegration","category":"page"},{"location":"stable_api/#AHMI","page":"API Documentation","title":"AHMI","text":"AHMI\n\nThe Adaptive Harmonic Mean Integration (AHMI) algorithm.\n\n\n\n\n\n","category":"module"},{"location":"stable_api/#AHMI.AHMIntegration","page":"API Documentation","title":"AHMI.AHMIntegration","text":"struct AHMIntegration <: IntegrationAlgorithm\n\nAdaptive Harmonic Mean Integration algorithm (Caldwell et al.).\n\nConstructors:\n\nAHMIntegration(; fields...)\n\nFields:\n\nwhitening::BAT.WhiteningAlgorithm\nDefault: CholeskyPartialWhitening()\nautocorlen::BAT.AutocorLenAlgorithm\nDefault: GeyerAutocorLen()\nvolumetype::Symbol\nDefault: :HyperRectangle\nmax_startingIDs::Int64\nDefault: 10000\nmax_startingIDs_fraction::Float64\nDefault: 2.5\nrect_increase::Float64\nDefault: 0.1\nwarning_minstartingids::Int64\nDefault: 16\ndotrimming::Bool\nDefault: true\nuncertainty::Vector{Symbol}\nList of uncertainty estimation methods to use, first entry will be used for primary result. Valid values:\n:cov: Integral uncertainty for integration regions is estimated based on covariance of integrals of subsets of samples in the regions\n:ess: Integral uncertainty for integration regions is estimated based on estimated effective number of samples in each region.\nDefault: [:cov]\n\n\n\n\n\n","category":"type"},{"location":"internal_api/#Internal-API","page":"Internal API","title":"Internal API","text":"","category":"section"},{"location":"internal_api/","page":"Internal API","title":"Internal API","text":"note: Note\nThis is the documentation of AHMI's internal API, it is subject to change without deprecation.","category":"page"},{"location":"internal_api/#Types","page":"Internal API","title":"Types","text":"","category":"section"},{"location":"internal_api/","page":"Internal API","title":"Internal API","text":"Pages = [\"internal_api.md\"]\nOrder = [:type]","category":"page"},{"location":"internal_api/#Functions-and-macros","page":"Internal API","title":"Functions and macros","text":"","category":"section"},{"location":"internal_api/","page":"Internal API","title":"Internal API","text":"Pages = [\"internal_api.md\"]\nOrder = [:macro, :function]","category":"page"},{"location":"internal_api/#Documentation","page":"Internal API","title":"Documentation","text":"","category":"section"},{"location":"internal_api/","page":"Internal API","title":"Internal API","text":"AHMI.DataSet\nAHMI.HMIData\nAHMI.HMISettings\nAHMI.IntegrationVolume\nAHMI.PointCloud\nAHMI.SearchResult\nAHMI.WhiteningResult\n\nAHMI.create_hypercube\nAHMI.create_hyperrectangle\nAHMI.find_hypercube_centers\nAHMI.hm_init\nAHMI.hm_integrate!\nAHMI.hm_whiteningtransformation!\nAHMI.hyperrectangle_creationproccess!\nAHMI.integrate_hyperrectangle_cov\nAHMI.modify_hypercube!\nAHMI.modify_integrationvolume!\nAHMI.reduced_volume_hm","category":"page"},{"location":"internal_api/#AHMI.DataSet","page":"Internal API","title":"AHMI.DataSet","text":"DataSet{T<:AbstractFloat, I<:Integer}\n\nAHMI-internal, not part of stable public API.\n\nHolds the MCMC output. For construction use constructor: function DataSet{T<:Real}(data::Matrix{T}, logprob::Vector{T}, weights::Vector{T})\n\nVariables\n\n'data' : An P x N array with N data points with P parameters.\n'logprob' : The logarithmic probability for each samples stored in an array\n'weights' : How often each sample occurred. Set to an array of ones if working directly on MCMC output\n'ids' : Array which is used to assign each sample to a batch, required for the cov. weighed uncertainty estimation\n.sortids : an array of indices which stores the original ordering of the samples (the space partitioning tree reorders the samples), required to calculate an effective sample size.\n'N' : number of samples\n'P' : number of parameters\n'nsubsets' : the number of batches\n'iswhitened' : a boolean value which indicates whether the data set is iswhitened\n'isnew' : a boolean value which indicates whether the data set was swapped out with a different one (it is possible to redo the integration with a different sample set using previously generated hyper-rectangles)\n'partitioningtree' : The space partitioning tree, used to efficiently identify samples in a point cloud\n'startingIDs' : The Hyper-Rectangle Seed Samples are stored in this array\n'tolerance' : A threshold required for the hyper-rectangle creation process.\n\n\n\n\n\n","category":"type"},{"location":"internal_api/#AHMI.HMIData","page":"Internal API","title":"AHMI.HMIData","text":"HMIData{T<:AbstractFloat, I<:Integer}\n\nAHMI-internal, not part of stable public API.\n\nIncludes all the informations of the integration process, including a list of hyper-rectangles, the results of the whitening transformation, the starting ids, and the average number of points and volume of the created hyper-rectangles.\n\nVariables\n\n'dataset1' : Data Set 1\n'dataset2' : Data Set 2\n'whiteningresult' : contains the whitening matrix and its determinant, required to scale the final integral estimate\n'volumelist1' : An array of integration volumes created using dataset1, but filled with samples from dataset2\n'volumelist2' : An array of integration volumes created using dataset2, but filled with samples from dataset1\n'cubelist1' : An array of small hyper-cubes created around seeding samples of dataset 1\n'cubelist2' : An array of small hyper-cubes created around seeding samples of dataset 2\n'iterations1' : The number of volume adapting iterations for the creating volumelist1\n'iterations2' : The number of volume adapting iterations for the creating volumelist2\n'rejectedrects1' : An array of ids, indicating which hyper-rectangles of volumelist1 were rejected due to trimming\n'rejectedrects2' : An array of ids, indicating which hyper-rectangles of volumelist2 were rejected due to trimming\n'integralestimates' : A dictionary containing the final integral estimates with uncertainty estimation using different uncertainty estimators. Also includes all intermediate results required for the integral estimate combination\n\n\n\n\n\n","category":"type"},{"location":"internal_api/#AHMI.HMISettings","page":"Internal API","title":"AHMI.HMISettings","text":"HMISettings\n\nAHMI-internal, not part of stable public API.\n\nholds the settings for the hm_integrate function. There are several default constructors available: HMIFastSettings() HMIStandardSettings() HMIPrecisionSettings()\n\n#Variables\n\n'whitening_method::Symbol' : which whitening method to use\n'max_startingIDs::Integer' : influences how many starting ids are allowed to be generated\n'maxstartingIDsfraction::AbstractFloat' : how many points are considered as possible starting points as a fraction of total points available\n'rect_increase::AbstractFloat' : describes the procentual rectangle volume increase/decrease during hyperrectangle creation. Low values can increase the precision if enough points are available but can cause systematically wrong results if not enough points are available.\n'useallrects::Bool' : All rectangles are used for the integration process no matter how big their overlap is. If enabled the rectangles are weighted by their overlap.\n'useMultiThreading' : activate multithreading support.\n'warning_minstartingids' : the required minimum amount of starting samples\n'dotrimming' : determines whether the integral estimates are trimmed (1Ïƒ trim) before combining them into a final result (more robust)\n'uncertaintyestimators' : A dictionary of different uncertainty estimator functions. Currently three functions are available: hmcombineresultslegacy! (outdated, overestimates uncertainty significantly in higher dimensions), hmcombineresultscovweighted! (very fast) and hmcombineresults_analyticestimation! (recommended)\n\nend\n\n\n\n\n\n","category":"type"},{"location":"internal_api/#AHMI.IntegrationVolume","page":"Internal API","title":"AHMI.IntegrationVolume","text":"IntegrationVolume{T<:AbstractFloat, I<:Integer}\n\nAHMI-internal, not part of stable public API.\n\nVariables\n\n'pointcloud' : holds the point cloud of the integration volume\n'spatialvolume' : the boundaries of the integration volume\n'volume' : the volume\n\nHold the point cloud and the spatial volume for integration.\n\n\n\n\n\n","category":"type"},{"location":"internal_api/#AHMI.PointCloud","page":"Internal API","title":"AHMI.PointCloud","text":"PointCloud{T<:AbstractFloat, I<:Integer}\n\nAHMI-internal, not part of stable public API.\n\nStores the information of the points of an e.g. HyperRectVolume\n\nVariables\n\n'maxLogProb' : The maximum log. probability of one of the points inside the hyper-rectangle\n'minLogProb' : The minimum log. probability of one of the points inside the hyper-rectangle\n'maxWeightProb' : the weighted max. log. probability\n'minWeightProb' : the weighted min. log. probability\n'probfactor' : The probability factor of the hyper-rectangle\n'probweightfactor' : The weighted probability factor\n'points' : The number of points inside the hyper-rectangle\n'pointIDs' : the IDs of the points inside the hyper-rectangle, might be empty because it is optional and costs performance\n'searchres' : used to boost performance\n\n\n\n\n\n","category":"type"},{"location":"internal_api/#AHMI.SearchResult","page":"Internal API","title":"AHMI.SearchResult","text":"SearchResult{T<:AbstractFloat, I<:Integer}\n\nAHMI-internal, not part of stable public API.\n\nStores the results of the space partitioning tree's search function\n\nVariables\n\n'pointIDs' : the IDs of samples found, might be empty because it is optional\n'points' : The number of points found.\n'maxLogProb' : the maximum log. probability of the points found.\n'minLogProb' : the minimum log. probability of the points found.\n'maxWeightProb' : the weighted minimum log. probability found.\n'minWeightProb' : the weighted maximum log. probfactor found.\n\n\n\n\n\n","category":"type"},{"location":"internal_api/#AHMI.WhiteningResult","page":"Internal API","title":"AHMI.WhiteningResult","text":"WhiteningResult{T<:AbstractFloat}\n\nAHMI-internal, not part of stable public API.\n\nStores the information obtained during the Whitening Process\n\nVariables\n\n'determinant' : The determinant of the whitening matrix\n'targetprobfactor' : The suggested target probability factor\n'whiteningmatrix' : The whitening matrix\n'meanvalue' : the mean vector of the input data\n\n\n\n\n\n","category":"type"},{"location":"internal_api/#AHMI.create_hypercube","page":"Internal API","title":"AHMI.create_hypercube","text":"create_hypercube{T<:Real}(origin::Vector{T}, edgelength::T)::HyperRectVolume\n\nAHMI-internal, not part of stable public API.\n\ncreates a hypercube shaped spatial volume\n\n\n\n\n\n","category":"function"},{"location":"internal_api/#AHMI.create_hyperrectangle","page":"Internal API","title":"AHMI.create_hyperrectangle","text":"create_hyperrectangle(...)\n\nAHMI-internal, not part of stable public API.\n\nThis function creates a hyper-rectangle around each starting sample. It starts by building a hyper-cube  and subsequently adapts each face individually, thus turning the hyper-cube into a hyper-rectangle. The faces are adjusted in a way to match the shape of the distribution as best as possible.\n\n\n\n\n\n","category":"function"},{"location":"internal_api/#AHMI.find_hypercube_centers","page":"Internal API","title":"AHMI.find_hypercube_centers","text":"find_hypercube_centers(dataset::DataSet{T, I}, whiteningresult::WhiteningResult, settings::HMISettings)::Vector{I}\n\nAHMI-internal, not part of stable public API.\n\nfinds possible starting points for the hyperrectangle creation\n\n\n\n\n\n","category":"function"},{"location":"internal_api/#AHMI.hm_init","page":"Internal API","title":"AHMI.hm_init","text":"hm_init!(result, settings)\n\nAHMI-internal, not part of stable public API.\n\nSets the global multithreading setting and ensures that a minimum number of samples, dependent on the number of dimensions, are provided.\n\n\n\n\n\n","category":"function"},{"location":"internal_api/#AHMI.hm_integrate!","page":"Internal API","title":"AHMI.hm_integrate!","text":"hm_integrate!(result, settings = HMIPrecisionSettings())\n\nAHMI-internal, not part of stable public API.\n\nThis function starts the adaptive harmonic mean integration. See arXiv:1808.08051 for more details. It needs a HMIData struct as input, which holds the samples, in form of a dataset, the integration volumes and other properties, required for the integration, and the final result.\n\n\n\n\n\n","category":"function"},{"location":"internal_api/#AHMI.hm_whiteningtransformation!","page":"Internal API","title":"AHMI.hm_whiteningtransformation!","text":"hm_whiteningtransformation!(result, settings)\n\nAHMI-internal, not part of stable public API.\n\nApplies a whitening transformation to the samples. A custom whitening method can be used by overriding settings.whitening_function!\n\n\n\n\n\n","category":"function"},{"location":"internal_api/#AHMI.hyperrectangle_creationproccess!","page":"Internal API","title":"AHMI.hyperrectangle_creationproccess!","text":"hyperrectangle_creationproccess!(...)\n\nAHMI-internal, not part of stable public API.\n\nThis function assigns each thread its own hyper-rectangle to build, if in multithreading-mode.\n\n\n\n\n\n","category":"function"},{"location":"internal_api/#AHMI.integrate_hyperrectangle_cov","page":"Internal API","title":"AHMI.integrate_hyperrectangle_cov","text":"Estimates reducedvolumehm quantity for one hyperrectangle including estimates from batches (for covariance calculations).\n\n\n\n\n\n","category":"function"},{"location":"internal_api/#AHMI.modify_hypercube!","page":"Internal API","title":"AHMI.modify_hypercube!","text":"create_hypercube!{T<:Real}(origin::Vector{T}, edgelength::T)::HyperRectVolume\n\nAHMI-internal, not part of stable public API.\n\nresizes a hypercube shaped spatial volume\n\n\n\n\n\n","category":"function"},{"location":"internal_api/#AHMI.modify_integrationvolume!","page":"Internal API","title":"AHMI.modify_integrationvolume!","text":"modify_integrationvolume!(intvol::IntegrationVolume{T, I}, dataset::DataSet{T, I}, spvol::HyperRectVolume{T}, searchpts::Bool = true)\n\nAHMI-internal, not part of stable public API.\n\nupdates an integration volume with new boundaries. Recalculates the pointcloud and volume.\n\n\n\n\n\n","category":"function"},{"location":"internal_api/#AHMI.reduced_volume_hm","page":"Internal API","title":"AHMI.reduced_volume_hm","text":"reduced_volume_hm!(log_prob, sample_weights, volume_size, n_total, weight_total, bias_correction==true)\n\nEstimate reduced volume harmonic mean for given arguments. Includes bias corection by default. Note: Weights are expected to be frequency weights (i.e. counts).\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#AHMI.jl","page":"Home","title":"AHMI.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package implements the Adaptive Harmonic Mean Algorithm (AHMI).","category":"page"},{"location":"","page":"Home","title":"Home","text":"AHMI.jl is built to support the BAT.jl integration interface, to use AHMI, run","category":"page"},{"location":"","page":"Home","title":"Home","text":"using AHMI, BAT\n\nbat_integrate(target, AHMIntegration())","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AHMI.jl it not a registered Julia package yet and currently requires BAT.jl v3.0.0-DEV.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install AHMI, use","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> pkg\"add BAT#main\"\njulia> pkg\"add https://github.com/bat/AHMI.jl.git\"","category":"page"},{"location":"#Citing-AHMI","page":"Home","title":"Citing AHMI","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use AHMI as an important part of your work, please cite  Caldwell et al. \"Integration with an Adaptive Harmonic Mean Algorithm\", IJMPA (2020).","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{Caldwell:2020AHMI,\n  author    = {Caldwell, Allen and Eller, Philipp and Hafych, Vasyl and Schick, Rafael and Schulz, Oliver and Szalay, Marco},\n  journal   = {International Journal of Modern Physics A},\n  title     = {Integration with an adaptive harmonic mean algorithm},\n  year      = {2020},\n  number    = {24},\n  pages     = {2050142},\n  volume    = {35},\n  doi       = {10.1142/S0217751X20501420},\n  publisher = {World Scientific},\n}","category":"page"}]
}
